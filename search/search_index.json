{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Yonder Deep Documentation For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#yonder-deep-documentation","text":"For full documentation visit mkdocs.org .","title":"Yonder Deep Documentation"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"auv/","text":"","title":"AUV"},{"location":"basestation/","text":"","title":"Basestation"},{"location":"pisetup/","text":"Set up an SD card with newest version of Raspbian (currently 11) Create directory ~~dev~~ from the root. Clone the Yonder Deep repository. Navigate to the auv folder. Run ~~~ sudo pigpiod ~~~ More details here: https://www.codetd.com/en/article/12959579 Run ~~~ sudo raspi-config ~~~ a. Select Interace Options b. Select I2C c. Select yes d. Select Interface Options e. Select Serial Port f. Select yes g. Select finish More details here: https://github.com/bluerobotics/ms5837-python 5. Navigate to the Adafruit_GPIO folder under api. Then navigate to Adafruit_Python... Run ~~~ sudo python setup.py install ~~~ More details here: https://github.com/adafruit/Adafruit_Python_GPIO Note: These instructions don't work on a raspberry pi 4.","title":"Pi-Setup"},{"location":"react_webapp/","text":"React Frontend This frontend is built with a react framework and FastAPI backend. How to Contribute First Time Setup Prerequistes: npm git python (3.x.x) other pip libraries To install python dependencies, run: cd web_app pip install -r requirements.txt To install node dependencies, run: cd web_app/auv_gui npm install To startup the GUI: sh startup.sh (Depending on what python version you have, you may have to edit startup.sh to be python or python3.)","title":"React-Webapp"},{"location":"react_webapp/#react-frontend","text":"This frontend is built with a react framework and FastAPI backend.","title":"React Frontend"},{"location":"react_webapp/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"react_webapp/#first-time-setup","text":"Prerequistes: npm git python (3.x.x) other pip libraries To install python dependencies, run: cd web_app pip install -r requirements.txt To install node dependencies, run: cd web_app/auv_gui npm install To startup the GUI: sh startup.sh (Depending on what python version you have, you may have to edit startup.sh to be python or python3.)","title":"First Time Setup"},{"location":"workflow/","text":"Workflow This page details the three stage testing process at Yonder Deep. Phase Purpose Branch Alpha local development and testing for one particular issue varies Beta integration testing for feature complete code development Production fully functional code that has been thoroughly tested master Stage 1 - Alpha Alpha testing refers to local develoment by a sub-section of the team for a particular issue. This development is done on its own branch and should be tested with an AUV and Basestation radio connection before being merged with the development branch. Procedure: Create a Ticket Navigate to the Issues page and create a New Issue with a relevant title and description. Add your issue to the Github Project board by dragging it from the \"Add cards\" panel. Working on a Ticket To start working on a ticket, create a local branch from main . Titling of branch names should follow this format: <Ticket Number>/<Title Abbreviation> You can get the ticket number from the Github issue page. An example branch name would be: 1/first-ticket . To create the branch, make sure you are in the main branch and then use git checkout -b <BRANCH NAME> . Work on your ticket within your branch, make occasional pulls and merges from main to make sure your code works with the latest changes: git checkout develop git pull git checkout <YOUR BRANCH> git merge develop Add and commit changes when appropriate: git add <FILE> git commit -m \"COMMIT MESSAGE\" Commit messages should be present imperative. Example: \"Add support for data transfer\" Push your changes to Github: git push If you are pushing your branch to Github for the first time, you will have to do this instead: git push --set-upstream origin <BRANCH NAME> #### Submitting a Pull Request 1. On Github, go to \"Pull requests\" and create a new pull request by selecting your branch for the ticket. 2. In the description of the pull request webpage, add: `Closes #<Issue Number>` Make sure you select develop as the branch being merged to. After having your PR reviewed, merge with the develop branch. Stage 2 - Beta Beta refers to testing conducted on a subset of features that need to be tested with a fully set-up AUV and Basestation. This will most likely consist of a pool test or something of a similar calibar. These tests are to be conducted periodically (dates TBD). Stage 3 - Production Production refers to the stable and fully tested code base. This code should only be updated after features on the develop branch thoroughly work as expected.","title":"Workflow"},{"location":"workflow/#workflow","text":"This page details the three stage testing process at Yonder Deep. Phase Purpose Branch Alpha local development and testing for one particular issue varies Beta integration testing for feature complete code development Production fully functional code that has been thoroughly tested master","title":"Workflow"},{"location":"workflow/#stage-1-alpha","text":"Alpha testing refers to local develoment by a sub-section of the team for a particular issue. This development is done on its own branch and should be tested with an AUV and Basestation radio connection before being merged with the development branch.","title":"Stage 1 - Alpha"},{"location":"workflow/#procedure","text":"","title":"Procedure:"},{"location":"workflow/#create-a-ticket","text":"Navigate to the Issues page and create a New Issue with a relevant title and description. Add your issue to the Github Project board by dragging it from the \"Add cards\" panel.","title":"Create a Ticket"},{"location":"workflow/#working-on-a-ticket","text":"To start working on a ticket, create a local branch from main . Titling of branch names should follow this format: <Ticket Number>/<Title Abbreviation> You can get the ticket number from the Github issue page. An example branch name would be: 1/first-ticket . To create the branch, make sure you are in the main branch and then use git checkout -b <BRANCH NAME> . Work on your ticket within your branch, make occasional pulls and merges from main to make sure your code works with the latest changes: git checkout develop git pull git checkout <YOUR BRANCH> git merge develop Add and commit changes when appropriate: git add <FILE> git commit -m \"COMMIT MESSAGE\" Commit messages should be present imperative. Example: \"Add support for data transfer\" Push your changes to Github: git push If you are pushing your branch to Github for the first time, you will have to do this instead: git push --set-upstream origin <BRANCH NAME> #### Submitting a Pull Request 1. On Github, go to \"Pull requests\" and create a new pull request by selecting your branch for the ticket. 2. In the description of the pull request webpage, add: `Closes #<Issue Number>` Make sure you select develop as the branch being merged to. After having your PR reviewed, merge with the develop branch.","title":"Working on a Ticket"},{"location":"workflow/#stage-2-beta","text":"Beta refers to testing conducted on a subset of features that need to be tested with a fully set-up AUV and Basestation. This will most likely consist of a pool test or something of a similar calibar. These tests are to be conducted periodically (dates TBD).","title":"Stage 2 - Beta"},{"location":"workflow/#stage-3-production","text":"Production refers to the stable and fully tested code base. This code should only be updated after features on the develop branch thoroughly work as expected.","title":"Stage 3 - Production"}]}